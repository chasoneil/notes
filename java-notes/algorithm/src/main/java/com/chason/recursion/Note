
所有 可以把一个大问题拆成几个小问题，并且每个小问题的规模都是一样的递归行为， 他的复杂度我们都可以写为

T(N) = aT(N/b) + O(N^d)  其中 a b d是常数

比如说我们第一个通过递归数组获取最大值的例子，我们的时间复杂度就可以写成

T(N) = 2(每个递归方法中又执行了两次递归) * T(N/2(这里我们每次递归的规模都是原来的数组的一半)) + 除了递归之外的其他操作都是常数  O(N^0)
T(N) = 2T(N/2) + O(N^0)

所有这种类型的递归都可以写成这种形式

当满足这种情况的递归的时候，时间复杂度计算：

1). log b a > d  复杂度是 O(N ^ log b a)
2). log b a < d  复杂度是 O(N ^ d)
3). log b a = d  复杂度是 O(N ^ d + log 2 N)